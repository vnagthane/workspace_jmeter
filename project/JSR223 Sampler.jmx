<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="P_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">P_USERNAME</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
//single line comment

/*
 * Multi line commments
 * 
 */

log.info &apos;hello world&apos;

log.info(&quot;Hello Word&quot;);

log.warn(&apos;This is warning&apos;)

log.error(&quot;This is error&quot;);

println &quot;This is print in console&quot;

OUT.println(&quot;This also prints in console&quot;)

def i 
i = &quot;Hello&quot;
println i 


i = 1 
log.info(&apos;Value of i &apos; + i)


str = &quot;Hello&quot;
log.info(&apos;value of str is &apos;+ str)

var j 
j = world
print j


String  u
u = &quot;Test&quot;
print u



// grovvy operators 

//Binary Operators
int a = 10
int b = 6

def ans 


ans = a + b 
println &apos;Addition&apos; + ans 

ans = a - b
println &apos;Sub&apos; + ans

ans = a * b 
println &apos;Multi&apos; + ans 

ans = a / b
println &apos;Division&apos; + ans 

ans = a ** b
println &apos;Power&apos; + ans 

ans = a++ + b
println &apos;Power Increment&apos; + ans 

ans = ++a + b 
println &apos;Pre Increment&apos; + ans 


assert( a+ b) == 16

assert a &gt; b 
assert a &gt;=b

b = 11
assert a &lt; b 
assert a&lt;=b 

b = 10
assert a==b

b = 6 
assert a !==b


// bitwise operators 

int a = 0b00001111
int b = 0b00000110

int ans
ans = a + b 
print ans

assert(a &amp; a ) == a

assert(a | b) == a

assert(a ^ b) !=a

assert (~a) !=a

// regex operators 

assert &apos;JMeter&apos; =~ &apos;Meter&apos;
assert &apos;JMeter&apos; =~ &apos;^J&apos;
assert &apos;JMeter&apos; =~ &apos;J*&apos;
assert &apos;JMeter&apos; =~ &apos;r$&apos;
assert &apos;Order ID 1001&apos; =~ &apos;Order ID (.+?)&apos;
assert &apos;Order ID 1001&apos; =~ &apos;Order ID [0-9][4]&apos;
assert &apos;Order ID PROD-1001&apos; =~ &apos;Order ID ^[a-zA-Z]{4}-[0-9]{4}&apos;


// Regex tester 

// Grovvy Control Structure

def a, b

Random random = new Random()

a = random.next(2)
b = random.next(3)

if (a &gt; b) {
	println a + &apos; is greater then &apos; + b
}

else if ( a == b) {
	println a + &apos; is equals &apos; + b 
}
else 
{
	println a + &apos; is less then &apos; + b
}


// RegEx

def a = &apos;Hello Grovvy&apos;

switch(a) 
{
	case ~/Hello G.*/:
		println &quot;Contains 6&quot;
		break
	deafult:
		println &quot;Just a String&quot;
}

def b = 12

switch(b) {
	case 11..15:
		println &quot;Within the range&quot;
		break
	default:
		println &quot;Inter&quot;
}


//for

for (int i = 1; i&lt;=10; i++){
	println i 
}

def fruits = [&apos;apple&apos;,&apos;orange&apos;,&apos;papaya&apos;]

for(def fruit in fruits){
	println fruit
}

def students = [&quot;Ram&quot; : 98, &quot;Games&quot;: 100, &quot;Siva&quot; : 95];

}

// while 

int c = 1

while(c &lt;=10){
	println c 
	c++
}

assert c == 11

//do while
do{
	println c 
	c++
} while(c &lt;=20)
assert c == 21


// JSR223 Variables 
/*
ctx : its context for thread

vars

props

log Label FileName Parameters Args SampleResult Sampler OUT


vars 

get  : to read variable

set : to update 

getObject

putObject  

props : 

properites

get 

put

getProperty

putProperty



*/


println ctx.getEngine()

println ctx.getThread()

println ctx.getThreadGroup()

println ctx.getThreadNum()

println ctx.getProperties()

println ctx.getProperties().getProperty(&apos;jmeter.version&apos;)

println ctx.getVariables().get(&apos;P_USERNAME&apos;)

</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-Log" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename">externalScriptFile.groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

println log.isDebugEnabled()

println log.isInfoEnabled()

println log.isWarnEnabled()

println log.isTraceEnabled()

log.info(&apos;The name is&apos; + log.getName())

log.error(&apos;Error&apos;)

log.warn(&apos;Warn&apos;)

log.debug(&apos;Debugging&apos;)

// print label name of sample

println Label //currentl sampler name

log.Info &apos;My sample name is : {} &apos;, Label

/////////////////////////


println &apos;Total arguments are &apos; + args.length

println &apos;First arguments &apos; + args[0]

println &apos;Last argument &apos; + args[args.length - 1]

for(int i = 0 ; i &lt; = (args.length - 1); i++) {
	println i + &apos;th argument is &apos; + args[i]
}

OUT.println &apos;Parameter is/are &apos; + Parameters //This reutrns all the values 


}


// filename

println &quot;This will be ignored&quot;

OUT.println(&quot;This also will be ignored&quot;)

// when we specify file name, the contents/code inside JMeter IDE will be ignored.

</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-2" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters">${P_USERNAME} ${P_PASSWORD} ${P_ENV}</stringProp>
          <stringProp name="script">println vars.get(&apos;P_USERNAME&apos;)
vars.put(&apos;P_USSERNAME&apos;, &apos;mynewusername&apos;)
println vars.get(&apos;P_USERNAME&apos;)

vars.remove(&apos;P_USERNAME&apos;)
println vars.get(&apos;P_USERNAME&apos;)

String  PERSON_NAME = &quot;Ram&quot;
vars.putObject(&apos;PERSON_NAME&apos;, PERSON_NAME);
println vars.getObjects(&apos;PERSON_NAME&apos;)

int PERSON_AGE = 35
vars.putObject(&apos;PERSON_AGE&apos;, PERSON_AGE.toString());
println vars.getObject(&apos;PERSON_AGE&apos;)


// props

println props.get(&apos;START.MS&apos;)
println props.get(&apos;remote_hosts&apos;)
println System.getProperty(&apos;os.name&apos;)

props.put(&apos;remote_hosts&apos;, 127.0.0.1&apos;)
println props.get(&apos;remote_hosts&apos;)

// 
SampleResult : pointer to current SampleReuslt

Log : JMEter uses Simple Logging Facade for Java SLF4J

Label : use to print/read sample lable name 

println SampleResult.getSampleLabel()

println SampleResult.getStartTime()

println SampleResult.getResponseCode()

println SampleResult.getResponseMessage()

println SampleResult.getSampleCount()

SampleResult.setSampleLabel(&apos;Modified Sample Label&apos;)

println SampleResult.getSampleLable()

SampleResult.setStartTime(System.currentTimeMillis())

println SampleResult.getStartTime()

SampleResult.setResonseCode(&apos;404&apos;)
println SampleResult.getResponseMessage()

SampleResult.setSampleCount(22)
println SampleResult.getSampleCount()


</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">example.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
println sampler.getDomain()
println sampler.getPort()
println sampler.getProtocol()

sampler.setDomain(&apos;bing.com&apos;)
sampler.setProtocol(&apos;https&apos;)
sampler.setPort(443)
sampler.setAutoRedirects(true)

println sampler.getDomain()
println sampler.getPort()
println sampler.getProtocol()

</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
println prev.getSampleLabel()

println prev.getSampleData()

println prev.getStartTime()

println prev.getResponseCode()

println prev.getURL()

println prev.isSucessful()

println prev.getSampleCount()

println prev.getLatency()

println prev.getTime()
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
